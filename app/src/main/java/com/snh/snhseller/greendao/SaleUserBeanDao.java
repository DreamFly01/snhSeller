package com.snh.snhseller.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.snh.snhseller.bean.salebean.SaleUserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALE_USER_BEAN".
*/
public class SaleUserBeanDao extends AbstractDao<SaleUserBean, Void> {

    public static final String TABLENAME = "SALE_USER_BEAN";

    /**
     * Properties of entity SaleUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SalesmanId = new Property(0, int.class, "SalesmanId", false, "SALESMAN_ID");
        public final static Property PhoneNumber = new Property(1, String.class, "PhoneNumber", false, "PHONE_NUMBER");
        public final static Property NickName = new Property(2, String.class, "NickName", false, "NICK_NAME");
        public final static Property RealName = new Property(3, String.class, "RealName", false, "REAL_NAME");
        public final static Property SalesmanLogo = new Property(4, String.class, "SalesmanLogo", false, "SALESMAN_LOGO");
    }


    public SaleUserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SaleUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALE_USER_BEAN\" (" + //
                "\"SALESMAN_ID\" INTEGER NOT NULL ," + // 0: SalesmanId
                "\"PHONE_NUMBER\" TEXT," + // 1: PhoneNumber
                "\"NICK_NAME\" TEXT," + // 2: NickName
                "\"REAL_NAME\" TEXT," + // 3: RealName
                "\"SALESMAN_LOGO\" TEXT);"); // 4: SalesmanLogo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALE_USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SaleUserBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSalesmanId());
 
        String PhoneNumber = entity.getPhoneNumber();
        if (PhoneNumber != null) {
            stmt.bindString(2, PhoneNumber);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(3, NickName);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(4, RealName);
        }
 
        String SalesmanLogo = entity.getSalesmanLogo();
        if (SalesmanLogo != null) {
            stmt.bindString(5, SalesmanLogo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SaleUserBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSalesmanId());
 
        String PhoneNumber = entity.getPhoneNumber();
        if (PhoneNumber != null) {
            stmt.bindString(2, PhoneNumber);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(3, NickName);
        }
 
        String RealName = entity.getRealName();
        if (RealName != null) {
            stmt.bindString(4, RealName);
        }
 
        String SalesmanLogo = entity.getSalesmanLogo();
        if (SalesmanLogo != null) {
            stmt.bindString(5, SalesmanLogo);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SaleUserBean readEntity(Cursor cursor, int offset) {
        SaleUserBean entity = new SaleUserBean( //
            cursor.getInt(offset + 0), // SalesmanId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PhoneNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RealName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // SalesmanLogo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SaleUserBean entity, int offset) {
        entity.setSalesmanId(cursor.getInt(offset + 0));
        entity.setPhoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSalesmanLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SaleUserBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SaleUserBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(SaleUserBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
